/* //БИНАРНОЕ ДЕРЕВО
#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>

using namespace std;

struct Node
{
	int info;
	Node* pred = NULL;
	Node* left = NULL;
	Node* right = NULL;
};

void push(Node* Elem, int data)
{
	if (Elem->pred == NULL)
	{
		Elem->info = data;
		Elem->pred = Elem;
	}
	else
	{
		if (Elem->info > data)
		{
			if (Elem->left == NULL)
			{
				Node* Buf = new Node;
				Buf->info = data;
				Buf->pred = Elem;
				Elem->left = Buf;
			}
			else
			{
				push(Elem->left, data);
			}
		}
		else if (Elem->info < data)
		{
			if (Elem->right == NULL)
			{
				Node* Buf = new Node;
				Buf->info = data;
				Buf->pred = Elem;
				Elem->right = Buf;
			}
			else
			{
				push(Elem->right, data);
			}
		}
	}
}

void show(Node* Elem, int level)
{
	if (Elem->left != NULL)
	{
		show(Elem->left, level + 1);
	}
	for (int i = 0; i < level; i++)
	{
		cout << "     ";
	}
	cout << Elem->info << '\n';
	if (Elem->right != NULL)
	{
		show(Elem->right, level + 1);
	}
}

void find_tree(Node* Elem, bool& flag, int data)
{
	if (Elem->left != NULL)
	{
		find_tree(Elem->left, flag, data);
	}
	if (Elem->info == data)
	{
		flag = true;
	}
	if (Elem->right != NULL)
	{
		find_tree(Elem->right, flag, data);
	}
}

int main()
{
	Node* Root = new Node;
	push(Root, 10);
	push(Root, 15);
	push(Root, 12);
	push(Root, 11);
	push(Root, 1);
	push(Root, 14);
	push(Root, 17);
	push(Root, 1000);
	show(Root, 0);
}*/

/*// ДЕРЕВО ОБЩЕГО ВИДА
#include <iostream>
#include <cstdio>
#include <string>

using namespace std;

struct Node
{
	int info = -1;
	Node* pred = NULL;
	Node* brat = NULL;
	Node* first = NULL;
};

void push(Node* Elem, string& s, int id, int data)
{
	if (id == s.size() - 1)
	{
		Elem->info = data;
	}
	if (s[id] == 'f')
	{
		if (Elem->first == NULL)
		{
			Node* Buf = new Node;
			Buf->pred = Elem;
			Elem->first = Buf;
		}
		push(Elem->first, s, id + 1, data);
	}
	if (s[id] == 'b')
	{
		if (Elem->brat == NULL)
		{
			Node* Buf = new Node;
			Buf->pred = Elem->pred;
			Elem->brat = Buf;
		}
		push(Elem->brat, s, id + 1, data);
	}
}

void show(Node* Elem, int level)
{
	for (int i = 0; i < level; i++)
	{
		cout << "     ";
	}
	cout << Elem->info << '\n';
	if (Elem->first != NULL)
	{
		show(Elem->first, level + 1);
	}
	if (Elem->brat != NULL)
	{
		show(Elem->brat, level);
	}
}

int main()
{
	Node* Root = new Node;
	string s = "p";
	push(Root, s, 0, 10);
	s = "fp";
	push(Root, s, 0, 5);
	s = "fbp";
	push(Root, s, 0, 3);
	s = "fbbp";
	push(Root, s, 0, 1);
	s = "fbfp";
	push(Root, s, 0, 7);
	s = "ffp";
	push(Root, s, 0, 11);
	s = "ffbp";
	push(Root, s, 0, 12);
	s = "ffbbp";
	push(Root, s, 0, 13);
	s = "ffbbbp";
	push(Root, s, 0, 19);
	s = "ffbbfp";
	push(Root, s, 0, 30);
	show(Root, 0);
}*/

/*// Дерево отрезков на узлах

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

struct Node
{
	long long info;

	// доп элементы

	int left_bort;
	int right_bort;
	Node* left = NULL;
	Node* right = NULL;
	Node* pred = NULL;
};

void change_elem(Node* elem, int id, long long data)
{
	if (elem->left == NULL && elem->right == NULL)
	{
		elem->info = data;
	}
	else
	{
		if (elem->left->left_bort <= id && elem->left->right_bort >= id)
		{
			change_elem(elem->left, id, data);
		}
		else
		{
			change_elem(elem->right, id, data);
		}

		// не будет ситуации, когда правого сына не существует

		elem->info = elem->left->info + elem->right->info;
	}
}

void init(Node* elem)
{
	if (elem->left_bort != elem->right_bort)
	{
		int mid = (elem->left_bort + elem->right_bort) / 2;
		Node* Buf_l = new Node;
		Node* Buf_r = new Node;
		Buf_l->left_bort = elem->left_bort;
		Buf_l->right_bort = mid;
		Buf_l->pred = elem;
		elem->left = Buf_l;
		init(Buf_l);

		Buf_r->left_bort = mid + 1;
		Buf_r->right_bort = elem->right_bort;
		Buf_r->pred = elem;
		elem->right = Buf_r;
		init(Buf_r);
	}
}

long long Sum_Tree(Node* elem, int l, int r)
{
	if (l <= elem->left_bort && elem->right_bort <= r)
	{
		return elem->info;
	}
	if (elem->right_bort < l || r < elem->left_bort)
	{
		return 0;
	}
	long long resl = Sum_Tree(elem->left, l, r);
	long long resr = Sum_Tree(elem->right, l, r);
	return resl + resr;
}

int main()
{
	int n;
	cin >> n;
	int q;
	cin >> q;
	Node* Root = new Node;
	Root->left_bort = 1;
	Root->right_bort = n;
	init(Root);
	for (int i = 1; i <= n; i++)
	{
		long long h;
		cin >> h;
		change_elem(Root, i, h);
	}
	for (int i = 0; i < q; i++)
	{
		int key;
		cin >> key;
		if (key == 1)
		{
			int l, r;
			cin >> l >> r;
			cout << Sum_Tree(Root, l, r);
		}
		else
		{
			int num_list, data;
			cin >> num_list >> data;
			change_elem(Root, num_list, data);
		}
	}
}*/

/*// AVL-дерево

#include <iostream>

using namespace std;

class AVLNode
{
public:
	int key;
	AVLNode* left;
	AVLNode* right;
	int depth;
};

int max(int a, int b)
{
	return (a > b) ? a : b;
}

int depth(AVLNode* n)
{
	if (n == NULL)
	{
		return 0;
	}
	return n->depth;
}

AVLNode* newNode(int key)
{
	AVLNode* node = new AVLNode();
	node->key = key;
	node->left = NULL;
	node->right = NULL;
	node->depth = 1;
	return node;
}

// повернуть вправо

AVLNode* rightRotate(AVLNode* y)
{
	AVLNode* x = y->left;
	AVLNode* T2 = x->right;
	// вращение
	x->right = y;
	y->left = T2;
	y->depth = max(depth(y->left), depth(y->right) + 1);
	x->depth = max(depth(x->left), depth(x->right) + 1);
	return x;
}

// повернуть влево 

AVLNode* leftRotate(AVLNode* x)
{
	AVLNode* y = x->right;
	AVLNode* T2 = y->left;
	// вращение 
	y->left = x;
	x->right = T2;
	x->depth = max(depth(x->left), depth(x->right) + 1);
	y->depth = max(depth(y->left), depth(y->right) + 1);
	return y;
}

int getBalance(AVLNode* N)
{
	if (N == NULL)
	{
		return 0;
	}
	else
	{
		return depth(N->left) - depth(N->right);
	}
}

// insert вставка

AVLNode* insert(AVLNode* node, int key)
{
	if (node == NULL)
	{
		return newNode(key);
	}
	if (key < node->key)
	{
		node->left = insert(node->left, key);
	}
	else if (key > node->key)
	{
		node->right = insert(node->right, key);
	}
	else
	{
		return node;
	}

	node->depth = 1 + max(depth(node->left), depth(node->right));

	int balance = getBalance(node);

	// вращаем несбалансированное дерево
	// лево лево

	if (balance > 1 && key < node->left->key)
	{
		return rightRotate(node);
	}

	// право право 

	if (balance <-1 && key > node->right->key)
	{
		return leftRotate(node);
	}

	//лево право 

	if (balance > 1 && key > node->left->key)
	{
		node->left = leftRotate(node->left);
		return rightRotate(node);
	}

	// право лево

	if (balance < -1 && key < node->right->key)
	{
		node->right = rightRotate(node->right);
		return leftRotate(node);
	}
	return node;
}

AVLNode* minValueNode(AVLNode* node)
{
	AVLNode* current = node;
	while (current->left != NULL)
	{
		current = current->left;
	}
	return current;
}

AVLNode* deleteNode(AVLNode* root, int key)
{
	if (root == NULL)
	{
		return root;
	}
	if (key < root->key)
	{
		root->left = deleteNode(root->left, key);
	}
	else if (key > root->key)
	{
		root->right = deleteNode(root->right, key);
	}
	else
	{
		if (root->left == NULL || root->right == NULL)
		{
			AVLNode* temp = root->left ? root->left : root->right;
			if (temp == NULL)
			{
				root = NULL;
			}
			else
			{
				*root = *temp;
			}
			free(temp);
		}
		else
		{
			AVLNode* temp = minValueNode(root->right);
			root->key = temp->key;
			root->right = deleteNode(root->right, temp->key);
		}
	}
	if (root == NULL)
	{
		return root;
	}
	root->depth = 1 + max(depth(root->left), depth(root->right));
	int balance = getBalance(root);

	// вращаем несбалансированное дерево
	// лево лево

	if (balance > 1 && getBalance(root->left) >= 1)
	{
		return rightRotate(root);
	}

	// право право 

	if (balance < -1 && getBalance(root->right) <= 0)
	{
		return leftRotate(root);
	}

	//лево право 

	if (balance > 1 && getBalance(root->right) < 0)
	{
		root->left = leftRotate(root->left);
		return rightRotate(root);
	}

	// право лево

	if (balance < -1 && getBalance(root->right) > 0)
	{
		root->right = rightRotate(root->right);
		return leftRotate(root);
	}
	return root;
}

void inOrder(AVLNode* root)
{
	if (root != NULL)
	{
		inOrder(root->left);
		cout << root->key << ' ';
		inOrder(root->right);
	}
}

void show(AVLNode* elem, int level)
{
	if (elem->left != NULL)
	{
		show(elem->left, level + 1);
	}
	for (int i = 0; i < level; i++)
	{
		cout << ' ';
	}
	cout << elem->key << '\n';
	if (elem->right != NULL)
	{
		show(elem->right, level + 1);
	}
}

int main()
{
	AVLNode* root = NULL;
	root = insert(root, 12);
	root = insert(root, 1);
	root = insert(root, 8);
	root = insert(root, 18);
	root = insert(root, 5);
	root = insert(root, 11);
	root = insert(root, 17);
	root = insert(root, 4);
	root = insert(root, 2);
	root = insert(root, 10);
	root = insert(root, 6);
	root = insert(root, 9);
	show(root, 0);
}*/
